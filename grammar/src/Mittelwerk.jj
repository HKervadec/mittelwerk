PARSER_BEGIN(Mittelwerk)
package Core;

import Ident.*;
import Utils.*;
import Manager.*;
import Emitter.*;
import Emitter.Instruction.*;


public class Mittelwerk {
	public static IdentManager i_m = new IdentManager();
	public static FunctionManager f_m = new FunctionManager();
	public static Mem<Type> t_m = new Mem<Type>();
	public static Mem<String> n_m = new Mem<String>();
	public static StateManager s_m = new StateManager();
	public static Emitter e = new Emitter();
	
	
    public static void main(String args[]) { 
        Mittelwerk parser;
        java.io.InputStream input;

        if(args.length >= 1){
            try{
                input = new java.io.FileInputStream(args[0]);
            }catch (java.io.FileNotFoundException e){
                System.out.println(e.getMessage());
                return;
            }
		}else{
            System.out.println("java Mittelwerk <input.mw>");
            return;
        }
		
        try{
            parser = new Mittelwerk(input);
            
            begin(args[0]);
            
            parser.v2();
            System.out.println("analyse syntaxique reussie!");
            
            the_end();
        }catch (ParseException e){
            String msg = e.getMessage();
            System.out.println("Syntax error:\n" + msg);
        } 
    } 
    
    public static void begin(String fileName){
    }
    
    public static void the_end(){
		System.out.println(e.getVesselName());
		System.out.println(i_m);
		
		e.emit();
    }
}

PARSER_END(Mittelwerk)


/**************************************/
/*				TOKEN				  */
/**************************************/

TOKEN_MGR_DECLS :
{public static String p_ident, p_string, p_tab, p_state;
 public static int p_int;
 public static double p_double;}

/*** Skip whitespace and comments ***/
SKIP :
{
      " "
    | "\t"
    | "\n" 
    | "\r"
    | "/*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
    < ~[] >
}
<IN_COMMENT> SKIP:
{
    < "*/" >  {SwitchTo(DEFAULT);} 
}


/* Reserved words */

TOKEN :
{
    < BOOL: "BOOL" >
    | < DOUBLE: "DOUBLE" >
	| < INT: "INT" >
	| < VOID: "VOID" >
	| < GOTO: "GOTO" >
	| < GOTOGOTO: "GOTOGOTO" >
	| < ACTION: "ACTION" >
	| < FINAL: "FINAL" >
	| < START: "START" >
	
	| < MIN: "MIN" >
	| < MAX: "MAX" >
	
	| < SET_LVL: "SET_LVL" >
	| < GET_LVL: "GET_LVL" >
	| < GET_ALTITUDE: "GET_ALTITUDE" >
	
	
	| < TRUE: "TRUE" >
	| < FALSE: "FALSE" >
	| < AND: "AND" >
	| < OR: "OR" >
	| < NOT: "NOT" >
	
	| <IF: "IF" >
	| <ELSE: "ELSE" >
}



/*** number, ident ***/
TOKEN  :
{
    < #digit : ["0"-"9"] >
    | < integer : (<digit>)+ > 
        { p_int = Integer.parseInt(image.toString());}
	| < double_ : (<digit>)+ "." (<digit>)* >
		{ p_double = Double.parseDouble(image.toString());}
	| < #state_c: ["A"-"Z"] | "_" | <digit> >
	| < state: (<state_c>)+ >
		{p_state = image.toString();
		 Mittelwerk.n_m.push(image.toString());}
    | < #letter: ["A"-"Z","a"-"z"] >
	| < #super_letter : <letter> | "_" >
    | < ident : <super_letter> (<super_letter> | <digit>)* >
        {p_ident = image.toString();
		 Mittelwerk.n_m.push(image.toString());}
	| < tab: <ident> "[" <digit> (<digit>)* "]" >
		{p_tab = image.toString();
		 Mittelwerk.n_m.push(image.toString());}
}



/**************************************/
/*				GRAMMAR				  */
/**************************************/

void v2(): {}{
	vesselName()
	(declThrusters())*
	(declFunctions())*
	(declStates())+
	
	<EOF>
}

void vesselName(): {}{
	<ident>
		{e.setVesselName(n_m.pop());}
}

void declThrusters(): {}{
	<ident>
		{i_m.memorizeName(n_m.pop());}
	":"
	<tab>
		{i_m.saveGlobal(Type.THRUSTER, n_m.pop());}
}

void declFunctions(): {}{
		{i_m.clearLocal();}
	typeFunction()
		{f_m.setCurrentType(t_m.pop());}
	<ident>
		{f_m.setCurrentName(n_m.pop());
		 f_m.createFunction();}
	"("
	[args()]
	")"
		{f_m.commitFunction();}
	"{"
	set_instruction()
	"}"
		{e.add(new I_Simple("}\n"));}
}

void args(): {}{
	arg()
	("," arg())*
}

void arg(): {}{
	type()
		{f_m.addParamType(t_m.pop());}
	<ident>
		{f_m.addParamName(n_m.pop());}
}

void set_instruction(): {}{
	(instruction())*
}

void instruction(): {}{
	decl_local_var() ";"
	| LOOKAHEAD(2) affect() ";"
	| fct_call() ";"
	| if_()
}

void decl_local_var(): {}{
	type() 
	<ident> 
		{i_m.memorizeName(n_m.pop());
			i_m.saveLocalVar(t_m.peek());}
	("," <ident>
			{i_m.memorizeName(n_m.pop());
			i_m.saveLocalVar(t_m.peek());} )*
		{t_m.drop();}
}

void affect(): {}{
	<ident> "=" valeur()
}

void valeur(): {}{
	LOOKAHEAD(2)
	expression()
	| fct_call()
}


void fct_call(): {}{
	<ident> "(" valeur() ("," valeur())* ")"
	| build_in()
}

void build_in(): {}{
	<SET_LVL> "(" <ident> "," valeur() ")"
	| <GET_LVL> "(" <ident> ")"
	| <GET_ALTITUDE> "(" ")"
	| max()
	| min()
}

void max(): {}{
	<MAX> "(" valeur() ( "," valeur() )+ ")"
}

void min(): {}{
	<MIN> "(" valeur() ( "," valeur() )+ ")"
}



void typeFunction(): {}{
	<VOID> 
		{t_m.push(Type.VOID);}
	| type()
}

void type(): {}{
	<BOOL>
		{t_m.push(Type.BOOL);}
	| <INT>
		{t_m.push(Type.INT);}
	| <DOUBLE>
		{t_m.push(Type.DOUBLE);}
}


void declStates(): {}{
		{i_m.clearLocal();}
	<state> 
		{s_m.addState(n_m.pop());} 
	"{"
		[ <START> ]
		<ACTION> "{"
			set_instruction()
		"}"
		jmp()
	"}"
		{e.add(new I_Simple("}\n"));}
}

void jmp(): {}{
	<FINAL>
	| <GOTO> "{"
		(if_goto())+
		"}"
}


void if_(): {}{
	<IF> "(" valeur() ")" "{"
		set_instruction()
	"}"
	( <ELSE> ("{" set_instruction() "}"
		| instruction()))?
}

void if_goto(): {}{
	<IF> "(" valeur() ")" "{"
		set_instruction()
		gotogoto() ";"
	"}"
	( <ELSE> ("{" set_instruction() gotogoto() ";" "}"
		| gotogoto() ";"))?
}

void gotogoto(): {}{
	<GOTOGOTO> <state>
}












/*
 * Expression .
 */

void expression() : {}
{
    simpleExpr() 
    (opRel() 
    simpleExpr() 
    )?  
}

void simpleExpr() : {}
{
    terme() 
    (opAdd() 
    terme()	
    )*
} 

void terme() : {}
{
    facteur() (opMul() facteur() )*
}

void facteur() : {}
{  
    primaire() 
    | opNeg() primaire()
}

void primaire (): {}
{
    value()
    | "(" expression() ")" 
}

void value () : {}
{ 
    <integer>
	| <double_>
    | <ident> 
    | <TRUE> 
    | <FALSE>
}

void opRel() : {}
{
    "=="
    | "<>" 	   
    | "<" 	
    | "<=" 	
    | ">" 	
    | ">=" 
} 

void opAdd() : {}
{
    "+"	
    |  "-"  
    | <OR> 	
}

void opMul() : {}
{
    "*"
    | "/"		
    | <AND>
} 

void opNeg() : {}
{ 
    "-" 
    | <NOT>
}







